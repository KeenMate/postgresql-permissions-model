/*
 GROUP HEADERS GENERATED BY: https://patorjk.com/software/taag/#p=display&h=0&v=1&c=c&f=ANSI%20Shadow&t=STAGE%20FUNCS

 SUB GROUP HEADERS GENERATED BY: https://patorjk.com/software/taag/#p=display&h=1&v=1&c=c&f=Banner3&t=permissions

 */
set
	search_path = public, const, ext, stage, helpers, internal, unsecure;

select *
from public.check_version('1.16', _component := 'postgresql_permissionmodel', _throw_err := true);

-- NOTICE: _component is no renamed to postgresql_permissionmodel to be consistent with name of the repository and module
select *
from start_version_update('1.17',
													'Fix of get_user_assigned_permissions having incorrect parameters',
													_description := '_target_user_id is integer instead of a bigint',
													_component := 'postgresql_permissionmodel');

drop function auth.get_user_assigned_permissions;
drop function unsecure.get_user_assigned_permissions;


create or replace function unsecure.get_user_assigned_permissions(_requested_by text, _user_id bigint, _target_user_id bigint, _tenant_id integer DEFAULT 1)
    returns TABLE(__permissions jsonb, __perm_set_title text, __perm_set_id integer, __perm_set_code text, __assignment_id bigint, __group_id integer)
    language plpgsql
as
$$
begin
    return query with assigments as (
        select pa.*
        from auth.permission_assignment pa
                 left join auth.user_group_member ugm on pa.group_id = ugm.group_id
        where (ugm.user_id = _target_user_id
            or pa.user_id = _target_user_id)
          and tenant_id = _tenant_id)
                 select jsonb_agg(jsonb_build_object('code', p.full_code, 'title', p.title, 'id',
                                                     p.permission_id))
                                as permissions
                      , ps.title
                      , ps.perm_set_id
                      , ps.code as perm_set_code
                      , a.assignment_id
                      , a.group_id
                 from assigments a
                          left join auth.perm_set ps on a.perm_set_id = ps.perm_set_id
                          left join auth.perm_set_perm psp on ps.perm_set_id = psp.perm_set_id
                          left join auth.permission p
                                    on (coalesce(a.permission_id, psp.permission_id) = p.permission_id)
                 group by ps.title, ps.perm_set_id, a.assignment_id, a.group_id
                 order by ps.title nulls last;


    perform
        add_journal_msg(_requested_by, _user_id
            , format('User: %s requested assigned permissions of user: %s in tenant: %s'
                            , _requested_by, _target_user_id, _tenant_id)
            , 'user', _target_user_id
            , null
            , 50211
            , _tenant_id := _tenant_id);
end;
$$;



create or replace function auth.get_user_assigned_permissions(_requested_by text, _user_id bigint, _target_user_id bigint, _tenant_id integer DEFAULT 1)
    returns TABLE(__permissions jsonb, __perm_set_title text, __perm_set_id integer, __perm_set_code text, __assignment_id bigint, __group_id integer)
    language plpgsql
as
$$
begin
    perform auth.has_permission(_user_id, 'users.get_permissions', _tenant_id);

    return query select *
                 from unsecure.get_user_assigned_permissions(_requested_by, _user_id, _target_user_id, _tenant_id);

end;
$$;


/***
 *    ██████╗  ██████╗ ███████╗████████╗     ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗
 *    ██╔══██╗██╔═══██╗██╔════╝╚══██╔══╝    ██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝
 *    ██████╔╝██║   ██║███████╗   ██║       ██║     ██████╔╝█████╗  ███████║   ██║   █████╗
 *    ██╔═══╝ ██║   ██║╚════██║   ██║       ██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝
 *    ██║     ╚██████╔╝███████║   ██║       ╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗
 *    ╚═╝      ╚═════╝ ╚══════╝   ╚═╝        ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝
 *
 */

select *
from public.stop_version_update('1.17', _component := 'postgresql_permissionmodel');