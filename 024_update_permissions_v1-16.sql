/*
 GROUP HEADERS GENERATED BY: https://patorjk.com/software/taag/#p=display&h=0&v=1&c=c&f=ANSI%20Shadow&t=STAGE%20FUNCS

 SUB GROUP HEADERS GENERATED BY: https://patorjk.com/software/taag/#p=display&h=1&v=1&c=c&f=Banner3&t=permissions

 */
set
	search_path = public, const, ext, stage, helpers, internal, unsecure;

select *
from public.check_version('1.15', _component := 'keen_auth_permissions', _throw_err := true);

-- NOTICE: _component is no renamed to postgresql_permissionmodel to be consistent with name of the repository and module
select *
from start_version_update('1.16',
													'Fix of auth.create_api_key not taking into account _tenant_id',
													_description := 'Api key is created in proper tenant, but the assigned perm set is always searched for in tenant_id = 1',
													_component := 'postgresql_permissionmodel');


create or replace function auth.create_api_key(_created_by text, _user_id bigint
, _title text, _description text
, _perm_set_code text, _permission_codes text[]
, _api_key text default null, _api_secret text default null
, _expire_at timestamptz default null, _notification_email text default null
, _tenant_id int default 1)
	returns table
					(
						__api_key_id int,
						__api_key    text,
						__api_secret text
					)
	language plpgsql
	rows 1
as
$$
declare
	__permission_code text;
	__api_secret      text;
	__api_secret_hash bytea;
	__api_key         text;
	__last_id         int;
	__api_user_id     bigint;
	__tenant_id       int;
begin

	perform auth.has_permission(_user_id, 'api_keys.create_api_key', _tenant_id);

	__tenant_id := coalesce(_tenant_id, 1);

	__api_key := coalesce(_api_key, auth.generate_api_key());
	__api_secret := coalesce(_api_secret, auth.generate_api_secret());
	__api_secret_hash := auth.generate_api_secret_hash(__api_secret);

	insert into auth.api_key( created_by, modified_by, tenant_id, title, description, api_key, secret_hash, expire_at
													, notification_email)
	values ( _created_by, _created_by, _tenant_id, _title, _description, __api_key, __api_secret_hash, _expire_at
				 , _notification_email)
	returning api_key_id
		into __last_id;

	select user_id
	from unsecure.create_api_user(_created_by, _user_id, __api_key, __tenant_id)
	into __api_user_id;

	if _perm_set_code is not null and _perm_set_code <> '' then
		perform unsecure.assign_permission(_created_by, _user_id, _target_user_id := __api_user_id,
																			 _perm_set_code := _perm_set_code, _tenant_id := __tenant_id);
	end if;

	if _permission_codes is not null and _permission_codes <> (array [])::text[] then
		foreach __permission_code in array _permission_codes
			loop
				perform unsecure.assign_permission(_created_by, _user_id, _target_user_id := __api_user_id,
																					 _perm_code := __permission_code, _tenant_id := __tenant_id);
			end loop;
	end if;

	return query
		select __last_id, __api_key, __api_secret;

	perform
		public.add_journal_msg_jsonb(_created_by, _user_id
			, format('User: %s created API key: %s in tenant: %s'
																	 , _created_by, coalesce(_title, __api_key), __tenant_id)
			, 'api_key'
			, __last_id
			, _data_object_code := __api_key
			, _payload := jsonb_strip_nulls(jsonb_build_object('api_key', __api_key, 'title', _title, 'description',
																												 _description,
																												 'expire_at', _expire_at,
																												 'notification_email', _notification_email
			, 'perm_set_code', _perm_set_code
			, 'permission_codes', _permission_codes))
			, _event_id := 50501
			, _tenant_id := coalesce(_tenant_id, 1));

end;
$$;


/***
 *    ██████╗  ██████╗ ███████╗████████╗     ██████╗██████╗ ███████╗ █████╗ ████████╗███████╗
 *    ██╔══██╗██╔═══██╗██╔════╝╚══██╔══╝    ██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔════╝
 *    ██████╔╝██║   ██║███████╗   ██║       ██║     ██████╔╝█████╗  ███████║   ██║   █████╗
 *    ██╔═══╝ ██║   ██║╚════██║   ██║       ██║     ██╔══██╗██╔══╝  ██╔══██║   ██║   ██╔══╝
 *    ██║     ╚██████╔╝███████║   ██║       ╚██████╗██║  ██║███████╗██║  ██║   ██║   ███████╗
 *    ╚═╝      ╚═════╝ ╚══════╝   ╚═╝        ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝
 *
 */

select *
from public.stop_version_update('1.16', _component := 'postgresql_permissionmodel');